# create_persona.py

import streamlit as st
import google.generativeai as genai
import re

# Initialize session state for personas if not already done
if 'personas' not in st.session_state:
    st.session_state.personas = {}

def add_persona(name, description, profile):
    """
    Add a new persona to the session state.

    Parameters:
    - name (str): The name of the persona.
    - description (str): A brief description of the persona.
    - profile (str): The full profile of the persona.
    """
    st.session_state.personas[name] = {
        "name": name,
        "description": description,
        "profile": profile,
        "image": "img/default_persona_image.webp",  # Use a default image or customize as needed
        "additional_info": f"**Custom Persona:** {description}"
    }

def clean_response(text):
    """
    Clean and preprocess the AI-generated text while preserving line breaks.

    Parameters:
    - text (str): The raw text generated by the AI.

    Returns:
    - str: The cleaned and preprocessed text.
    """
    # Split the text into lines to preserve structure
    lines = text.split('\n')
    cleaned_lines = []
    for line in lines:
        # Remove asterisks and other formatting characters
        line = re.sub(r'[*_~`]', '', line)

        # Replace various types of dashes with regular hyphens
        line = re.sub(r'[–—−]', '-', line)

        # Add spaces after punctuation if missing
        line = re.sub(r'([.,!?;:])(?=\S)', r'\1 ', line)

        # Add spaces between words if missing (camel case split)
        line = re.sub(r'([a-z])([A-Z])', r'\1 \2', line)

        # Add spaces between numbers and words if missing
        line = re.sub(r'(\d)([a-zA-Z])', r'\1 \2', line)
        line = re.sub(r'([a-zA-Z])(\d)', r'\1 \2', line)

        # Fix spacing around apostrophes
        line = re.sub(r'\s\'', "'", line)
        line = re.sub(r'\'\s', "' ", line)

        # Remove extra spaces within the line
        line = re.sub(r'\s+', ' ', line)

        # Remove repeated phrases (case insensitive)
        words = line.split()
        cleaned_words = []
        for i, word in enumerate(words):
            if i == 0 or word.lower() != words[i - 1].lower():
                cleaned_words.append(word)

        # Rejoin the words into a cleaned line
        cleaned_line = ' '.join(cleaned_words)
        cleaned_lines.append(cleaned_line)

    # Rejoin all cleaned lines with line breaks
    cleaned_text = '\n'.join(cleaned_lines)

    return cleaned_text.strip()

def generate_full_persona(brief_description):
    """
    Generate a comprehensive and realistic financial persona based on a brief description.

    Parameters:
    - brief_description (str): A short description of the desired persona.

    Returns:
    - str: The AI-generated full profile of the persona.
    """
    model = genai.GenerativeModel('gemini-1.5-flash')

    # Enhanced prompt with an example to guide the AI
    prompt = f"""
Based on the following brief description, generate a comprehensive and realistic financial persona for retirement planning purposes. The response must strictly follow the structured format provided below, with each attribute on a new line and no additional text or explanations.

**Format:**
Name: John Doe Age: 45 Occupation: Software Engineer Marital Status: Single Dependents: 0 Location: Austin, Texas Annual Income: $120,000 Current Savings: $80,000 Total Debt: $15,000 Risk Tolerance: Medium Investment Portfolio:

Stocks: 40%
Bonds: 30%
Cash: 20%
Other Investments: 10% Retirement Savings Plans:
401(k): Yes
Balance: $50,000
Annual Contribution: $10,000
IRA: Yes
Type: Roth
Balance: $30,000
Annual Contribution: $5,000 Financial Products of Interest: Mutual Funds, ETFs Desired Retirement Age: 55 Retirement Lifestyle: Comfortable lifestyle with occasional travel and hobbies. Financial Knowledge: Intermediate Personality: Analytical, detail-oriented, proactive Financial Concerns: Market volatility, maintaining investment growth

    **Brief Description:**
    {brief_description}

    **Instructions:**
    1. Replace each placeholder (e.g., [Full Name], [Age]) with the corresponding information derived from the brief description.
    2. Ensure there are no deviations from the format. The AI should not add any additional sections or explanations.
    3. If a particular attribute is not applicable based on the brief description, mark it as "N/A".
    """

    try:
        response = model.generate_content(prompt)
        if response.parts:
            raw_text = response.parts[0].text
            pre_processed_text = clean_response(raw_text)
            return pre_processed_text
        else:
            return "I'm sorry, I couldn't generate a response at this time."
    except Exception as e:
        st.error(f"An error occurred while generating the persona: {e}")
        return "I'm sorry, I couldn't generate a response at this time."


def extract_detail_from_profile(profile, key):
    """
    Extract a specific detail from the persona's profile.

    Parameters:
    - profile (str): The full profile of the persona.
    - key (str): The attribute to extract (e.g., "Name", "Age").

    Returns:
    - str: The extracted value or "N/A" if not found.
    """
    key_lower = key.lower()
    for line in profile.split('\n'):
        line = line.strip()
        if line.lower().startswith(f"{key_lower}:"):
            return line.split(':', 1)[1].strip()
    return "N/A"  # Return "N/A" if the key is not found


def create_persona_form():
    """
    Form to manually create a new persona with detailed inputs.
    """
    st.header("Create New Persona")

    use_ai_background = st.checkbox(
        "Generate AI Background",
        value=True,
        help="Use AI to generate a detailed background story"
    )

    with st.form("new_persona_form", clear_on_submit=True):
        # Personal Information
        st.subheader("Personal Information")
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("Full Name", help="Enter the persona's full name")
            age = st.number_input("Age", min_value=18, max_value=100, value=30, help="Enter the persona's age")
            occupation = st.text_input("Occupation", help="Enter the persona's current job or profession")
        with col2:
            marital_status = st.selectbox(
                "Marital Status",
                ["Single", "Married", "Divorced", "Widowed"],
                help="Select the persona's marital status"
            )
            dependents = st.number_input(
                "Number of Dependents",
                min_value=0,
                max_value=10,
                value=0,
                help="Enter the number of dependents (e.g., children)"
            )
            location = st.text_input("Location", help="Enter the city and state where the persona lives")

        # Financial Information
        st.subheader("Financial Information")
        col3, col4 = st.columns(2)
        with col3:
            annual_income = st.number_input(
                "Annual Income ($)",
                min_value=0,
                value=50000,
                step=1000,
                help="Enter the persona's annual income"
            )
            savings = st.number_input(
                "Current Savings ($)",
                min_value=0,
                value=10000,
                step=1000,
                help="Enter the persona's current savings amount"
            )
        with col4:
            debt = st.number_input(
                "Total Debt ($)",
                min_value=0,
                value=0,
                step=1000,
                help="Enter the persona's total debt"
            )
            risk_tolerance = st.select_slider(
                "Risk Tolerance",
                options=["Very Low", "Low", "Medium", "High", "Very High"],
                value="Medium",
                help="Select the persona's risk tolerance for investments"
            )

        # Investment Portfolio
        st.subheader("Investment Portfolio")
        col5, col6 = st.columns(2)
        with col5:
            stocks_percentage = st.slider(
                "Stocks (%)",
                0,
                100,
                30,
                help="Percentage of portfolio in stocks"
            )
            bonds_percentage = st.slider(
                "Bonds (%)",
                0,
                100,
                30,
                help="Percentage of portfolio in bonds"
            )
        with col6:
            cash_percentage = st.slider(
                "Cash (%)",
                0,
                100,
                20,
                help="Percentage of portfolio in cash"
            )
            other_percentage = st.slider(
                "Other Investments (%)",
                0,
                100,
                20,
                help="Percentage in other investments"
            )

        # Retirement Savings Plans
        st.subheader("Retirement Savings Plans")
        col7, col8 = st.columns(2)
        with col7:
            has_401k = st.checkbox("Has 401(k)")
            if has_401k:
                _401k_balance = st.number_input(
                    "401(k) Balance ($)",
                    min_value=0,
                    value=0,
                    step=1000,
                    help="Enter the 401(k) balance"
                )
                _401k_contribution = st.number_input(
                    "Annual 401(k) Contribution ($)",
                    min_value=0,
                    value=0,
                    step=500,
                    help="Enter the annual 401(k) contribution"
                )
        with col8:
            has_ira = st.checkbox("Has IRA")
            if has_ira:
                ira_type = st.selectbox(
                    "IRA Type",
                    ["Traditional", "Roth"],
                    help="Select the IRA type"
                )
                ira_balance = st.number_input(
                    "IRA Balance ($)",
                    min_value=0,
                    value=0,
                    step=1000,
                    help="Enter the IRA balance"
                )
                ira_contribution = st.number_input(
                    "Annual IRA Contribution ($)",
                    min_value=0,
                    value=0,
                    step=500,
                    help="Enter the annual IRA contribution"
                )

        # Financial Products of Interest
        st.subheader("Financial Products of Interest")
        financial_products = st.multiselect(
            "Select financial products of interest",
            ["Mutual Funds", "ETFs", "Annuities", "Life Insurance", "Real Estate Investment Trusts (REITs)",
             "Certificates of Deposit (CDs)"]
        )

        # Retirement Goals
        st.subheader("Retirement Goals")
        retirement_age = st.slider(
            "Desired Retirement Age",
            min_value=50,
            max_value=75,
            value=65,
            help="Select the age at which the persona wants to retire"
        )
        retirement_lifestyle = st.text_area(
            "Desired Retirement Lifestyle",
            help="Describe the persona's ideal retirement lifestyle"
        )

        # Background and Personality
        st.subheader("Background and Personality")
        financial_knowledge = st.select_slider(
            "Financial Knowledge",
            options=["Novice", "Basic", "Intermediate", "Advanced", "Expert"],
            value="Basic",
            help="Select the persona's level of financial knowledge"
        )
        personality = st.text_area(
            "Personality Traits",
            help="Describe the persona's key personality traits"
        )
        concerns = st.text_area(
            "Financial Concerns",
            help="List any specific financial concerns or worries the persona has"
        )

        if not use_ai_background:
            additional_background = st.text_area(
                "Additional Background",
                height=150,
                help="Provide any additional background information or context for this persona"
            )

        # Submit Button
        submitted = st.form_submit_button("Create Persona")

        if submitted:
            # Validate required fields
            required_fields = [name, occupation, location, retirement_lifestyle, personality, concerns]
            if all(required_fields):
                # Construct initial persona info
                persona_info = f"""
    Name: {name}
    Age: {age}
    Occupation: {occupation}
    Marital Status: {marital_status}
    Dependents: {dependents}
    Location: {location}
    Annual Income: ${annual_income:,}
    Current Savings: ${savings:,}
    Total Debt: ${debt:,}
    Risk Tolerance: {risk_tolerance}
    Investment Portfolio:
    - Stocks: {stocks_percentage}%
    - Bonds: {bonds_percentage}%
    - Cash: {cash_percentage}%
    - Other Investments: {other_percentage}%
    Retirement Savings Plans:
    - 401(k): {"Yes" if has_401k else "No"}
    {f"  - Balance: ${_401k_balance:,}" if has_401k else ""}
    {f"  - Annual Contribution: ${_401k_contribution:,}" if has_401k else ""}
    - IRA: {"Yes" if has_ira else "No"}
    {f"  - Type: {ira_type}" if has_ira else ""}
    {f"  - Balance: ${ira_balance:,}" if has_ira else ""}
    {f"  - Annual Contribution: ${ira_contribution:,}" if has_ira else ""}
    Financial Products of Interest: {", ".join(financial_products) if financial_products else "N/A"}
    Desired Retirement Age: {retirement_age}
    Retirement Lifestyle: {retirement_lifestyle}
    Financial Knowledge: {financial_knowledge}
    Personality: {personality}
    Financial Concerns: {concerns}
    """

                # Generate AI background or use provided background
                if use_ai_background:
                    with st.spinner("Generating detailed background..."):
                        ai_background = generate_full_persona(persona_info)
                    full_profile = f"{persona_info}\n\nAI-Generated Background:\n{ai_background}"
                else:
                    full_profile = f"{persona_info}\n\nAdditional Background:\n{additional_background}"

                # Extract basic details from the generated profile
                name_extracted = extract_detail_from_profile(full_profile, "Name") or "Unnamed"
                age_extracted = extract_detail_from_profile(full_profile, "Age") or "N/A"
                location_extracted = extract_detail_from_profile(full_profile, "Location") or "N/A"

                # Identify missing essential fields
                missing_fields = []
                if name_extracted == "Unnamed":
                    missing_fields.append("Name")
                if age_extracted == "N/A":
                    missing_fields.append("Age")
                if location_extracted == "N/A":
                    missing_fields.append("Location")

                # Notify user about missing essential fields but still save the persona
                if missing_fields:
                    st.warning(
                        f"Some essential details were not extracted correctly: {', '.join(missing_fields)}. "
                        "The persona will still be saved."
                    )

                # Add the generated persona to session state
                add_persona(name_extracted, f"{age_extracted}-year-old {occupation} from {location_extracted}",
                            full_profile)

                st.success(f"Persona '{name_extracted}' has been successfully created!")

            else:
                st.error("Please fill in all required fields.")


def ai_create_persona_form():
    """
    Form to create a new persona using AI-driven generation based on a brief description.
    """
    st.header("AI-Driven Persona Creation")

    st.write(
        "Provide a brief description of the desired persona, and the system will generate a detailed profile for you."
    )

    with st.form("ai_persona_form", clear_on_submit=True):
        brief_description = st.text_area(
            "Brief Description",
            height=150,
            help=(
                "Enter a short description of the persona (e.g., 'A 45-year-old single software engineer "
                "with moderate savings and interest in ETFs.')"
            )
        )

        submitted = st.form_submit_button("Generate Persona")

        if submitted:
            if brief_description.strip():
                with st.spinner("Generating detailed persona..."):
                    full_profile = generate_full_persona(brief_description)

                # Extract basic details from the generated profile
                name = extract_detail_from_profile(full_profile, "Name") or "Unnamed"
                age = extract_detail_from_profile(full_profile, "Age") or "N/A"
                occupation = extract_detail_from_profile(full_profile, "Occupation") or "N/A"
                location = extract_detail_from_profile(full_profile, "Location") or "N/A"

                # Identify missing essential fields
                missing_fields = []
                if name == "Unnamed":
                    missing_fields.append("Name")
                if age == "N/A":
                    missing_fields.append("Age")
                if location == "N/A":
                    missing_fields.append("Location")

                # Notify user about missing essential fields but still save the persona
                if missing_fields:
                    st.warning(
                        f"Some essential details were not extracted correctly: {', '.join(missing_fields)}. "
                        "The persona will still be saved."
                    )

                # Add the generated persona to session state
                add_persona(name, f"{age}-year-old {occupation} from {location}", full_profile)

                st.success(f"Persona '{name}' has been successfully created!")
            else:
                st.error("Please enter a brief description to generate a persona.")


def display_personas():
    """
    Display all existing personas in a grid layout with optional full profile viewing.
    """
    st.header("Existing Personas")
    if not st.session_state.personas:
        st.info("No personas created yet. Create one to get started!")
    else:
        # Define CSS for the persona grid and cards
        st.markdown("""
            <style>
            .persona-grid {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                justify-content: flex-start;
            }
            .persona-card {
                background-color: #2c2c2c;
                border-radius: 10px;
                padding: 20px;
                width: 300px;
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                color: #e0e0e0;
            }
            .persona-name {
                font-size: 24px;
                margin-bottom: 10px;
                color: #4a90e2;
            }
            .persona-description {
                font-size: 16px;
                margin-bottom: 15px;
            }
            .persona-details p {
                margin: 5px 0;
            }
            </style>
            """, unsafe_allow_html=True)

        # Create a grid container for the persona cards
        st.markdown('<div class="persona-grid">', unsafe_allow_html=True)

        for name, persona in st.session_state.personas.items():
            # Extract additional details from the persona profile
            def extract_detail(key):
                return extract_detail_from_profile(persona['profile'], key)

            age = extract_detail('Age')
            occupation = extract_detail('Occupation')
            location = extract_detail('Location')
            income = extract_detail('Annual Income')
            retirement_age = extract_detail('Desired Retirement Age')

            # Format the description
            description = persona['description']

            # Display the persona card
            st.markdown(f"""
                <div class="persona-card">
                    <h3 class="persona-name">{name}</h3>
                    <p class="persona-description">{description}</p>
                    <div class="persona-details">
                        <p><strong>Age:</strong> {age}</p>
                        <p><strong>Occupation:</strong> {occupation}</p>
                        <p><strong>Location:</strong> {location}</p>
                        <p><strong>Annual Income:</strong> {income}</p>
                        <p><strong>Desired Retirement Age:</strong> {retirement_age}</p>
                    </div>
                </div>
                """, unsafe_allow_html=True)

        # Close the grid container
        st.markdown('</div>', unsafe_allow_html=True)

        # Add a button to view full profiles
        if 'show_full_profiles' not in st.session_state:
            st.session_state.show_full_profiles = False

        if st.button("Toggle Full Profiles"):
            st.session_state.show_full_profiles = not st.session_state.show_full_profiles

        # Display full profiles if toggled
        if st.session_state.show_full_profiles:
            st.subheader("Full Profiles")
            for name, persona in st.session_state.personas.items():
                with st.expander(f"Full Profile: {name}"):
                    st.text_area(
                        "",
                        value=persona['profile'],
                        height=300,
                        key=f"profile_{name}",
                        disabled=True
                    )
